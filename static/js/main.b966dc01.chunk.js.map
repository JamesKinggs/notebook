{"version":3,"sources":["Components/Form.tsx","Components/NavList.tsx","actions/toggleSpan.js","Components/Nav.tsx","actions/toggleNight.js","Components/Word.tsx","App.tsx","reportWebVitals.ts","reducers/toggleSpan.js","reducers/nightThemeReducer.js","reducers/index.js","index.tsx"],"names":["Form","words","setWords","inputRef","useRef","submitHandler","a","current","value","fetch","response","ok","json","data","word","key","uuidv4","name","audio","phonetics","type","meanings","partOfSpeech","definition","definitions","example","synonyms","slice","wordArray","unshift","localStorage","setItem","JSON","stringify","alert","className","onSubmit","e","preventDefault","required","ref","onClick","NavList","text","dispath","useDispatch","toggleState","useSelector","state","spanReducer","toLowerCase","payload","Nav","useState","navIsOpen","setNavIsOpen","dispatch","nightTheme","nightReducer","window","addEventListener","clientX","innerWidth","Word","array","onDelete","playAudio","isSpanHidden","formattedSynonyms","map","synonym","index","length","getItem","night","App","useEffect","parse","newWords","filter","Audio","play","style","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","prevSettings","toggleSpanReducer","updatedSettings","nightThemeReducer","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b966dc01.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport { Props as wordProp } from \"../App\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface Props {\n  words: object[];\n  setWords: React.Dispatch<React.SetStateAction<wordProp[\"word\"][]>>;\n}\n\nconst Form: React.FC<Props> = ({ words, setWords }): JSX.Element => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const submitHandler = async () => {\n    if (inputRef.current) {\n      const value = inputRef.current.value;\n      inputRef.current.value = \"\";\n      const response = await fetch(\n        `https://api.dictionaryapi.dev/api/v2/entries/en/${value}`\n      );\n\n      if (response.ok) {\n        const data = (await response.json())[0];\n        const word: wordProp[\"word\"] = {\n          key: uuidv4(),\n          name: data.word,\n          audio: data.phonetics[0].audio,\n          type: data.meanings[0].partOfSpeech,\n          definition: data.meanings[0].definitions[0].definition,\n          example: data.meanings[0].definitions[0].example,\n          synonyms: data.meanings[0].definitions[0].synonyms.slice(0, 5),\n        };\n\n        const wordArray = words as wordProp[\"word\"][];\n        wordArray.unshift(word);\n        setWords([...wordArray]);\n        localStorage.setItem(\"learn-vocab-words\", JSON.stringify(wordArray));\n      } else {\n        alert(\n          \"oof there is no such word. You might want to check your spelling ðŸ¤¨\"\n        );\n      }\n    }\n  };\n\n  return (\n    <div className=\"search\">\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          submitHandler();\n        }}\n      >\n        <input type=\"text\" required ref={inputRef} />\n        <div className=\"decoration\"></div>\n        <div className=\"inputText\">Word...</div>\n      </form>\n      <i onClick={submitHandler} className=\"fas fa-search\" />\n    </div>\n  );\n};\n\nexport default Form;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { toggle } from \"../actions/toggleSpan\";\n\ninterface Props {\n  text: string;\n}\n\nconst NavList: React.FC<Props> = ({ text }) => {\n  const dispath = useDispatch();\n  const toggleState = useSelector(\n    (state: { spanReducer: any }) => state.spanReducer\n  );\n  return (\n    <li>\n      <h2>{text}</h2>\n      <div\n        className={toggleState[text.toLowerCase()] ? \"toggle on\" : \"toggle\"}\n        onClick={() => dispath(toggle(text.toLowerCase()))}\n      >\n        <div className=\"circle\" />\n      </div>\n    </li>\n  );\n};\n\nexport default NavList;\n","export const toggle = (span) => {\n  return {\n    type: \"TOGGLE_SPAN\",\n    payload: span,\n  };\n};\n","import React from \"react\";\nimport NavList from \"./NavList\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toggleNight } from \"../actions/toggleNight\";\n\nconst Nav: React.FC = (): JSX.Element => {\n  const [navIsOpen, setNavIsOpen] = useState(false);\n  const dispatch = useDispatch();\n  const nightTheme = useSelector((state: any) => state.nightReducer);\n\n  const toggleNav = (): void => {\n    setNavIsOpen(!navIsOpen);\n  };\n\n  window.addEventListener(\"click\", (e) => {\n    if (e.clientX < window.innerWidth / 2) {\n      setNavIsOpen(false);\n    }\n  });\n\n  return (\n    <nav className={navIsOpen ? \"active\" : \"\"}>\n      <div className=\"contain\">\n        <h1>MyNoteBook</h1>\n        <i className=\"fas fa-book\" />\n      </div>\n      <div className=\"cog\">\n        <i className=\"fas fa-cog\" onClick={toggleNav} />\n      </div>\n      <ul>\n        <li className=\"row\">\n          <i className=\"far fa-sun\" />\n          <div\n            className={nightTheme ? \"toggle on\" : \"toggle\"}\n            onClick={() => dispatch(toggleNight())}\n          >\n            <div className=\"circle\" />\n          </div>\n          <i className=\"fas fa-moon\" />\n        </li>\n        <NavList text=\"Type\" />\n        <NavList text=\"Definition\" />\n        <NavList text=\"Example\" />\n        <NavList text=\"Synonyms\" />\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","export const toggleNight = () => {\n  return {\n    type: \"TOGGLE\",\n  };\n};\n","import { Props } from \"../App\";\nimport { useSelector } from \"react-redux\";\n\ninterface functionProps {\n  onDelete: (name: string) => void;\n  playAudio: (audio: string) => void;\n}\n\nconst Word: React.FC<Props[\"word\"] & functionProps> = ({\n  name,\n  type,\n  definition,\n  example,\n  synonyms,\n  audio,\n  onDelete,\n  playAudio,\n}) => {\n  const isSpanHidden = useSelector((state: any) => state.spanReducer);\n\n  const formatSynonyms = (array: string[]) => {\n    return array.map((synonym, index) => {\n      if (index === array.length - 1) {\n        return synonym;\n      } else {\n        return `${synonym}, `;\n      }\n    });\n  };\n\n  const formattedSynonyms = formatSynonyms(synonyms);\n\n  return (\n    <div className=\"word\">\n      <div className=\"row-1\">\n        <h1>{name}</h1>\n        <i className=\"far fa-play-circle\" onClick={() => playAudio(audio)} />\n      </div>\n      <div className=\"row-2\">\n        <p>\n          <span className={isSpanHidden[\"type\"] ? \"type hidden\" : \"type\"}>\n            {type}\n          </span>\n        </p>\n        <h2>\n          Definition:{\" \"}\n          <span\n            className={\n              isSpanHidden[\"definition\"] ? \"definition hidden\" : \"definition\"\n            }\n          >\n            {definition}\n          </span>\n        </h2>\n        <h3>\n          Example:{\" \"}\n          <span\n            className={isSpanHidden[\"example\"] ? \"example hidden\" : \"example\"}\n          >\n            {example}\n          </span>\n        </h3>\n        <h3>\n          Synonyms:{\" \"}\n          <span\n            className={\n              isSpanHidden[\"synonyms\"] ? \"synonyms hidden\" : \"synonyms\"\n            }\n          >\n            {formattedSynonyms}\n          </span>\n        </h3>\n      </div>\n      <i className=\"fas fa-times\" onClick={() => onDelete(name)} />\n    </div>\n  );\n};\n\nexport default Word;\n","import Form from \"./Components/Form\";\nimport Nav from \"./Components/Nav\";\nimport Word from \"./Components/Word\";\nimport \"./styles/App.css\";\nimport { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nexport interface Props {\n  word: {\n    key: string;\n    name: string;\n    audio: string;\n    type: string;\n    definition: string;\n    example: string;\n    synonyms: any;\n  };\n}\n\nif (!localStorage.getItem(\"previous-settings\")) {\n  localStorage.setItem(\n    \"previous-settings\",\n    JSON.stringify({\n      type: false,\n      definition: true,\n      example: false,\n      synonyms: false,\n      night: true,\n    })\n  );\n}\n\nfunction App() {\n  const [words, setWords] = useState<Props[\"word\"][]>([]);\n  const nightTheme = useSelector((state: any) => state.nightReducer);\n\n  useEffect(() => {\n    const data = localStorage.getItem(\"learn-vocab-words\");\n    if (data) {\n      const array: any = JSON.parse(data);\n      setWords(array);\n    }\n  }, []);\n\n  const onDelete = (name: string): void => {\n    const newWords = words.filter((word: Props[\"word\"]) => word.name !== name);\n    setWords(newWords);\n    localStorage.setItem(\"learn-vocab-words\", JSON.stringify(newWords));\n  };\n\n  const playAudio = (audio: string): void => {\n    if (audio) {\n      const sound = new Audio(audio);\n      sound.play();\n    } else {\n      alert(\"Sorry this word does not have an audio track ðŸ˜•\");\n    }\n  };\n\n  return (\n    <div className={nightTheme ? \"App\" : \"App light\"}>\n      <Nav />\n      <Form words={words} setWords={setWords} />\n      {words.length >= 1 ? (\n        <main>\n          {words.map((word: Props[\"word\"]) => {\n            return (\n              <Word\n                onDelete={onDelete}\n                playAudio={playAudio}\n                key={word.key}\n                audio={word.audio}\n                name={word.name}\n                type={word.type}\n                definition={word.definition}\n                example={word.example}\n                synonyms={word.synonyms}\n              />\n            );\n          })}\n        </main>\n      ) : (\n        <h1 style={{ textAlign: \"center\" }}>\n          No word yet? Start adding one...\n        </h1>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const prevSettings = JSON.parse(localStorage.getItem(\"previous-settings\"));\n\nconst toggleSpanReducer = (\n  state = {\n    type: prevSettings[\"type\"],\n    definition: prevSettings[\"definition\"],\n    example: prevSettings[\"example\"],\n    synonyms: prevSettings[\"synonyms\"],\n  },\n  { type, payload }\n) => {\n  const updatedSettings = JSON.parse(localStorage.getItem(\"previous-settings\"));\n  switch (type) {\n    case \"TOGGLE_SPAN\":\n      switch (payload) {\n        case \"type\":\n          localStorage.setItem(\n            \"previous-settings\",\n            JSON.stringify({ ...updatedSettings, type: !state.type })\n          );\n          return { ...state, type: !state.type };\n        case \"definition\":\n          localStorage.setItem(\n            \"previous-settings\",\n            JSON.stringify({\n              ...updatedSettings,\n              definition: !state.definition,\n            })\n          );\n          return { ...state, definition: !state.definition };\n        case \"example\":\n          localStorage.setItem(\n            \"previous-settings\",\n            JSON.stringify({ ...updatedSettings, example: !state.example })\n          );\n          return { ...state, example: !state.example };\n        case \"synonyms\":\n          localStorage.setItem(\n            \"previous-settings\",\n            JSON.stringify({ ...updatedSettings, synonyms: !state.synonyms })\n          );\n          return { ...state, synonyms: !state.synonyms };\n        default:\n          return state;\n      }\n    default:\n      return state;\n  }\n};\n\nexport default toggleSpanReducer;\n","const prevSettings = JSON.parse(localStorage.getItem(\"previous-settings\"));\n\nconst nightThemeReducer = (state = prevSettings[\"night\"], { type }) => {\n  const updatedSettings = JSON.parse(localStorage.getItem(\"previous-settings\"));\n  switch (type) {\n    case \"TOGGLE\":\n      localStorage.setItem(\n        \"previous-settings\",\n        JSON.stringify({ ...updatedSettings, night: !state })\n      );\n      return !state;\n    default:\n      return state;\n  }\n};\n\nexport default nightThemeReducer;\n","import { combineReducers } from \"redux\";\nimport toggleSpanReducer from \"./toggleSpan\";\nimport nightThemeReducer from \"./nightThemeReducer\";\n\nconst rootReducer = combineReducers({\n  spanReducer: toggleSpanReducer,\n  nightReducer: nightThemeReducer,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(\n  rootReducer\n  // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}